//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer CAMERA_CONSTANTS
// {
//
//   struct CAMERA
//   {
//       
//       float4 position;               // Offset:    0
//       float4 direction;              // Offset:   16
//       row_major float4x4 view;       // Offset:   32
//       row_major float4x4 projection; // Offset:   96
//       row_major float4x4 view_projection;// Offset:  160
//       row_major float4x4 inverse_view;// Offset:  224
//       row_major float4x4 inverse_view_projection;// Offset:  288
//       row_major float4x4 previous_view_projection;// Offset:  352
//
//   } camera;                          // Offset:    0 Size:   416
//
// }
//
// cbuffer SCENE_CONSTANTS
// {
//
//   struct DIRECTIONAL_LIGHT
//   {
//       
//       float4 direction;              // Offset:    0
//       float4 color;                  // Offset:   16
//
//   } directional_light;               // Offset:    0 Size:    32
//   
//   struct POINT_LIGHT
//   {
//       
//       float4 position;               // Offset:   32
//       float4 color;                  // Offset:   48
//
//   } point_light;                     // Offset:   32 Size:    32 [unused]
//   
//   struct SPOT_LIGHT
//   {
//       
//       float4 position;               // Offset:   64
//       float4 color;                  // Offset:   80
//       float4 dir;                    // Offset:   96
//
//   } spot_light;                      // Offset:   64 Size:    48 [unused]
//   float4 ambient_color;              // Offset:  112 Size:    16 [unused]
//
// }
//
// cbuffer FOG
// {
//
//   float3 fogColor;                   // Offset:    0 Size:    12
//   float fogStartDepth;               // Offset:   12 Size:     4
//   float3 fogHighlightColor;          // Offset:   16 Size:    12
//   float fogGlobalDensity;            // Offset:   28 Size:     4
//   float3 dummy;                      // Offset:   32 Size:    12 [unused]
//   float fogHeightFallOff;            // Offset:   44 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// diffuse_map_sampler_state         sampler      NA          NA             s0      1 
// diffuse_map                       texture  float4          2d             t0      1 
// depth_map                         texture  float4          2d             t1      1 
// FOG                               cbuffer      NA          NA            cb0      1 
// CAMERA_CONSTANTS                  cbuffer      NA          NA            cb1      1 
// SCENE_CONSTANTS                   cbuffer      NA          NA            cb2      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
// COLOR                    0   xyzw        2     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer CB1[22], immediateIndexed
dcl_constantbuffer CB2[1], immediateIndexed
dcl_constantbuffer CB0[3], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 4
//
// Initial variable locations:
//   v0.x <- pin.sv_position.x; v0.y <- pin.sv_position.y; v0.z <- pin.sv_position.z; v0.w <- pin.sv_position.w; 
//   v1.x <- pin.texcoord.x; v1.y <- pin.texcoord.y; 
//   v2.x <- pin.color.x; v2.y <- pin.color.y; v2.z <- pin.color.z; v2.w <- pin.color.w; 
//   o0.x <- <main return value>.x; o0.y <- <main return value>.y; o0.z <- <main return value>.z; o0.w <- <main return value>.w
//
#line 10 "D:\GameProject\Library\LibrarySource\Fog_ps.hlsl"
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v1.xyxx, t0.xyzw, s0  // r0.x <- colour_map_color.x; r0.y <- colour_map_color.y; r0.z <- colour_map_color.z; r0.w <- colour_map_color.w

#line 11
sample_indexable(texture2d)(float,float,float,float) r1.x, v1.xyxx, t1.xyzw, s0
mov r1.x, r1.x  // r1.x <- depth_map_color

#line 13
mov r0.xyz, r0.xyzx  // r0.x <- fragment_color.x; r0.y <- fragment_color.y; r0.z <- fragment_color.z

#line 14
mov r0.w, r0.w  // r0.w <- alpha

#line 19
itof r1.y, l(2)
mul r1.y, r1.y, v1.x
itof r1.z, l(1)
mov r1.z, -r1.z
add r1.y, r1.z, r1.y  // r1.y <- position_in_ndc.x

#line 20
itof r1.z, l(-2)
mul r1.z, r1.z, v1.y
itof r1.w, l(1)
add r1.z, r1.w, r1.z  // r1.z <- position_in_ndc.y

#line 21
mov r1.x, r1.x  // r1.x <- position_in_ndc.z

#line 22
itof r1.w, l(1)  // r1.w <- position_in_ndc.w

#line 25
mul r2.xyzw, r1.yyyy, cb1[18].xyzw
mul r3.xyzw, r1.zzzz, cb1[19].xyzw
add r2.xyzw, r2.xyzw, r3.xyzw
mul r3.xyzw, r1.xxxx, cb1[20].xyzw
add r2.xyzw, r2.xyzw, r3.xyzw
mul r1.xyzw, r1.wwww, cb1[21].xyzw
add r1.xyzw, r1.xyzw, r2.xyzw  // r1.x <- position_in_world_space.x; r1.y <- position_in_world_space.y; r1.z <- position_in_world_space.z; r1.w <- position_in_world_space.w

#line 26
div r1.xyz, r1.xyzx, r1.wwww

#line 28
nop 
mov r0.xyz, r0.xyzx
mov r1.xyz, r1.xyzx
mov r2.xyz, cb1[0].xyzx

#line 32 "D:\GameProject\Library\LibrarySource\Fog.hlsli"
mov r2.xzw, -r2.xxyz
add r1.xyz, r1.xyzx, r2.xzwx  // r1.x <- eyeToPixel.x; r1.y <- eyeToPixel.y; r1.z <- eyeToPixel.z

#line 33
dp3 r1.w, r1.xyzx, r1.xyzx
sqrt r1.w, r1.w  // r1.w <- pixelDist

#line 34
div r2.xzw, r1.xxyz, r1.wwww  // r2.x <- eyeToPixelNorm.x; r2.z <- eyeToPixelNorm.y; r2.w <- eyeToPixelNorm.z

#line 36
mov r1.x, -cb0[0].w
add r1.x, r1.x, r1.w
max r1.x, r1.x, l(0.000000)  // r1.x <- fogDist

#line 38
mov r1.z, -cb0[2].w
mul r1.z, r2.y, r1.z
mul r1.z, r1.z, l(1.442695)
exp r1.z, r1.z  // r1.z <- fogHeightDensityAtViewer

#line 39
mul r1.z, r1.z, r1.x  // r1.z <- fogDistInt

#line 41
div r1.x, r1.x, r1.w
mul r1.x, r1.x, r1.y  // r1.x <- eyeToPixelY

#line 42
mul r1.x, r1.x, cb0[2].w  // r1.x <- t

#line 43
mov r1.y, l(0.010000)  // r1.y <- thresholdT

#line 44
mov r1.w, -r1.x
max r1.w, r1.w, r1.x
lt r1.y, r1.y, r1.w
mov r1.w, -r1.x
mul r1.w, r1.w, l(1.442695)
exp r1.w, r1.w
mov r1.w, -r1.w
add r1.w, r1.w, l(1.000000)
div r1.x, r1.w, r1.x
movc r1.x, r1.y, r1.x, l(1.000000)  // r1.x <- fogHeightInt

#line 47
mov r1.y, -cb0[1].w
mul r1.y, r1.z, r1.y
mul r1.x, r1.x, r1.y
mul r1.x, r1.x, l(1.442695)
exp r1.x, r1.x  // r1.x <- fogFinalFactor

#line 49
mov r1.yzw, -cb2[0].xxyz
dp3 r2.y, r1.yzwy, r1.yzwy
rsq r2.y, r2.y
mul r1.yzw, r1.yyzw, r2.yyyy  // r1.y <- lightNomal.x; r1.z <- lightNomal.y; r1.w <- lightNomal.z

#line 50
dp3 r1.y, r1.yzwy, r2.xzwx
max r1.y, r1.y, l(0.000000)
min r1.y, r1.y, l(1.000000)  // r1.y <- lightFactor

#line 51
mov r1.z, l(1.000000)
mul r1.y, r1.y, r1.y
mul r1.y, r1.y, r1.y
mul r1.y, r1.y, r1.y
mul r1.y, r1.y, r1.z  // r1.y <- lightFactor

#line 52
mov r2.xyz, -cb0[0].xyzx
add r2.xyz, r2.xyzx, cb0[1].xyzx
mul r1.yzw, r1.yyyy, r2.xxyz
add r1.yzw, r1.yyzw, cb0[0].xxyz  // r1.y <- fogFinalColor.x; r1.z <- fogFinalColor.y; r1.w <- fogFinalColor.z

#line 54
mov r2.xyz, -r1.yzwy
add r0.xyz, r0.xyzx, r2.xyzx
mul r0.xyz, r0.xyzx, r1.xxxx
add r0.xyz, r0.xyzx, r1.yzwy  // r0.x <- <ApplyFog return value>.x; r0.y <- <ApplyFog return value>.y; r0.z <- <ApplyFog return value>.z

#line 28 "D:\GameProject\Library\LibrarySource\Fog_ps.hlsl"
mov r0.xyz, r0.xyzx  // r0.x <- fragment_color.x; r0.y <- fragment_color.y; r0.z <- fragment_color.z

#line 30
mov o0.xyz, r0.xyzx
mov o0.w, r0.w
ret 
// Approximately 84 instruction slots used
