//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer CONSTANT_BUFFER
// {
//
//   float4x4 world;                    // Offset:    0 Size:    64
//   float4x4 bone_transforms[128];     // Offset:   64 Size:  8192
//   float4 material_color;             // Offset: 8256 Size:    16
//
// }
//
// cbuffer CAMERA_CONSTANTS
// {
//
//   struct CAMERA
//   {
//       
//       float4 position;               // Offset:    0
//       float4 direction;              // Offset:   16
//       row_major float4x4 view;       // Offset:   32
//       row_major float4x4 projection; // Offset:   96
//       row_major float4x4 view_projection;// Offset:  160
//       row_major float4x4 inverse_view;// Offset:  224
//       row_major float4x4 inverse_view_projection;// Offset:  288
//       row_major float4x4 previous_view_projection;// Offset:  352
//
//   } camera;                          // Offset:    0 Size:   416
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// CONSTANT_BUFFER                   cbuffer      NA          NA            cb0      1 
// CAMERA_CONSTANTS                  cbuffer      NA          NA            cb1      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// NORMAL                   0   xyzw        1     NONE   float   xyz 
// TEXCOORD                 0   xy          2     NONE   float   xy  
// WEIGHTS                  0   xyzw        3     NONE   float   xyzw
// BONES                    0   xyzw        4     NONE    uint   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// POSITION                 0   xyzw        1     NONE   float   xyzw
// NORMAL                   0   xyzw        2     NONE   float   xyzw
// COLOR                    0   xyzw        3     NONE   float   xyzw
// TEXCOORD                 0   xy          4     NONE   float   xy  
//
vs_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_immediateConstantBuffer { { 1.000000, 0, 0, 0},
                              { 0, 1.000000, 0, 0},
                              { 0, 0, 1.000000, 0},
                              { 0, 0, 0, 1.000000},
                              { -1, 0, 0, 0},
                              { 0, -1, 0, 0},
                              { 0, 0, -1, 0},
                              { 0, 0, 0, -1} }
dcl_constantbuffer CB0[517], dynamicIndexed
dcl_constantbuffer CB1[14], immediateIndexed
dcl_input v0.xyzw
dcl_input v1.xyz
dcl_input v2.xy
dcl_input v3.xyzw
dcl_input v4.xyzw
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xy
dcl_temps 7
//
// Initial variable locations:
//   v0.x <- position.x; v0.y <- position.y; v0.z <- position.z; v0.w <- position.w; 
//   v1.x <- normal.x; v1.y <- normal.y; v1.z <- normal.z; v1.w <- normal.w; 
//   v2.x <- texcoord.x; v2.y <- texcoord.y; 
//   v3.x <- bone_weights.x; v3.y <- bone_weights.y; v3.z <- bone_weights.z; v3.w <- bone_weights.w; 
//   v4.x <- bone_indices.x; v4.y <- bone_indices.y; v4.z <- bone_indices.z; v4.w <- bone_indices.w; 
//   o4.x <- <main return value>.texcoord.x; o4.y <- <main return value>.texcoord.y; 
//   o3.x <- <main return value>.color.x; o3.y <- <main return value>.color.y; o3.z <- <main return value>.color.z; o3.w <- <main return value>.color.w; 
//   o2.x <- <main return value>.normal.x; o2.y <- <main return value>.normal.y; o2.z <- <main return value>.normal.z; o2.w <- <main return value>.normal.w; 
//   o1.x <- <main return value>.position.x; o1.y <- <main return value>.position.y; o1.z <- <main return value>.position.z; o1.w <- <main return value>.position.w; 
//   o0.x <- <main return value>.sv_position.x; o0.y <- <main return value>.sv_position.y; o0.z <- <main return value>.sv_position.z; o0.w <- <main return value>.sv_position.w
//
#line 12 "D:\Lib関連\GameProject\Library\LibrarySource\SkinnedMesh_vs.hlsl"
itof r0.xyz, l(0, 0, 0, 0)  // r0.x <- blended_position.x; r0.y <- blended_position.y; r0.z <- blended_position.z

#line 13
itof r1.xyz, l(0, 0, 0, 0)  // r1.x <- blended_normal.x; r1.y <- blended_normal.y; r1.z <- blended_normal.z

#line 14
mov r0.w, l(0)  // r0.w <- i
mov r2.xyz, r0.xyzx  // r2.x <- blended_position.x; r2.y <- blended_position.y; r2.z <- blended_position.z
mov r3.xyz, r1.xyzx  // r3.x <- blended_normal.x; r3.y <- blended_normal.y; r3.z <- blended_normal.z
mov r1.w, r0.w  // r1.w <- i
loop 
  ilt r4.x, r1.w, l(4)
  breakc_z r4.x

#line 16
  dp4 r4.x, v3.xyzw, icb[r1.w + 0].xyzw
  and r5.xyzw, v4.xyzw, icb[r1.w + 4].xyzw
  or r4.yz, r5.yywy, r5.xxzx
  or r4.y, r4.z, r4.y
  imul null, r4.y, r4.y, l(4)
  dp4 r5.x, v0.xyzw, cb0[r4.y + 4].xyzw
  dp4 r5.y, v0.xyzw, cb0[r4.y + 5].xyzw
  dp4 r5.z, v0.xyzw, cb0[r4.y + 6].xyzw
  mul r4.xyz, r4.xxxx, r5.xyzx
  add r2.xyz, r2.xyzx, r4.xyzx

#line 17
  dp4 r4.x, v3.xyzw, icb[r1.w + 0].xyzw
  itof r5.w, l(0)
  and r6.xyzw, v4.xyzw, icb[r1.w + 4].xyzw
  or r4.yz, r6.yywy, r6.xxzx
  or r4.y, r4.z, r4.y
  imul null, r4.y, r4.y, l(4)
  mov r5.xyz, v1.xyzx
  dp4 r6.x, r5.xyzw, cb0[r4.y + 4].xyzw
  dp4 r6.y, r5.xyzw, cb0[r4.y + 5].xyzw
  dp4 r6.z, r5.xyzw, cb0[r4.y + 6].xyzw
  mul r4.xyz, r4.xxxx, r6.xyzx
  add r3.xyz, r3.xyzx, r4.xyzx

#line 18
  iadd r1.w, r1.w, l(1)
endloop 

#line 20
mov r2.xyz, r2.xyzx  // r2.x <- position.x; r2.y <- position.y; r2.z <- position.z
mov r2.w, l(1.000000)  // r2.w <- position.w

#line 21
mov r3.xyz, r3.xyzx  // r3.x <- normal.x; r3.y <- normal.y; r3.z <- normal.z

#line 24
mul r0.xyzw, cb0[0].xyzw, cb1[10].xxxx
mul r1.xyzw, cb0[1].xyzw, cb1[11].xxxx
add r0.xyzw, r0.xyzw, r1.xyzw
mul r1.xyzw, cb0[2].xyzw, cb1[12].xxxx
add r0.xyzw, r0.xyzw, r1.xyzw
mul r1.xyzw, cb0[3].xyzw, cb1[13].xxxx
add r0.xyzw, r0.xyzw, r1.xyzw
mul r1.xyzw, cb0[0].xyzw, cb1[10].yyyy
mul r4.xyzw, cb0[1].xyzw, cb1[11].yyyy
add r1.xyzw, r1.xyzw, r4.xyzw
mul r4.xyzw, cb0[2].xyzw, cb1[12].yyyy
add r1.xyzw, r1.xyzw, r4.xyzw
mul r4.xyzw, cb0[3].xyzw, cb1[13].yyyy
add r1.xyzw, r1.xyzw, r4.xyzw
mul r4.xyzw, cb0[0].xyzw, cb1[10].zzzz
mul r5.xyzw, cb0[1].xyzw, cb1[11].zzzz
add r4.xyzw, r4.xyzw, r5.xyzw
mul r5.xyzw, cb0[2].xyzw, cb1[12].zzzz
add r4.xyzw, r4.xyzw, r5.xyzw
mul r5.xyzw, cb0[3].xyzw, cb1[13].zzzz
add r4.xyzw, r4.xyzw, r5.xyzw
mul r5.xyzw, cb0[0].xyzw, cb1[10].wwww
mul r6.xyzw, cb0[1].xyzw, cb1[11].wwww
add r5.xyzw, r5.xyzw, r6.xyzw
mul r6.xyzw, cb0[2].xyzw, cb1[12].wwww
add r5.xyzw, r5.xyzw, r6.xyzw
mul r6.xyzw, cb0[3].xyzw, cb1[13].wwww
add r5.xyzw, r5.xyzw, r6.xyzw
dp4 r0.x, r2.xyzw, r0.xyzw  // r0.x <- vout.sv_position.x
dp4 r0.y, r2.xyzw, r1.xyzw  // r0.y <- vout.sv_position.y
dp4 r0.z, r2.xyzw, r4.xyzw  // r0.z <- vout.sv_position.z
dp4 r0.w, r2.xyzw, r5.xyzw  // r0.w <- vout.sv_position.w

#line 25
dp4 r1.x, r2.xyzw, cb0[0].xyzw  // r1.x <- vout.position.x
dp4 r1.y, r2.xyzw, cb0[1].xyzw  // r1.y <- vout.position.y
dp4 r1.z, r2.xyzw, cb0[2].xyzw  // r1.z <- vout.position.z
dp4 r1.w, r2.xyzw, cb0[3].xyzw  // r1.w <- vout.position.w

#line 27
itof r3.w, l(0)  // r3.w <- normal.w

#line 28
dp4 r2.x, r3.xyzw, cb0[0].xyzw
dp4 r2.y, r3.xyzw, cb0[1].xyzw
dp4 r2.z, r3.xyzw, cb0[2].xyzw
dp4 r2.w, r3.xyzw, cb0[3].xyzw
dp4 r3.x, r2.xyzw, r2.xyzw
rsq r3.x, r3.x
mul r2.xyzw, r2.xyzw, r3.xxxx  // r2.x <- vout.normal.x; r2.y <- vout.normal.y; r2.z <- vout.normal.z; r2.w <- vout.normal.w

#line 29
mov r3.xyzw, cb0[516].xyzw  // r3.x <- vout.color.x; r3.y <- vout.color.y; r3.z <- vout.color.z; r3.w <- vout.color.w

#line 31
mov r4.xy, v2.xyxx  // r4.x <- vout.texcoord.x; r4.y <- vout.texcoord.y

#line 33
mov o0.xyzw, r0.xyzw
mov o1.xyzw, r1.xyzw
mov o2.xyzw, r2.xyzw
mov o3.xyzw, r3.xyzw
mov o4.xy, r4.xyxx
ret 
// Approximately 88 instruction slots used
